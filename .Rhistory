pops_hospital <- paste0("<center><strong style='color:blue'>",hospital$Facility.Name,"</strong>","<br/>",hospital$Phone, "<br/>", hospital$address, "</center>")
basemap %>% addMarkers(lng = hospital$Longitude, lat = hospital$Latitude, clusterOptions = markerClusterOptions() , popup = pops_hospital, icon=hospitalIcon)
coord <- sapply(art$the_geom, function(x) {
substr(x, 8, nchar(x)-1)
}) %>% as.character()
values <- strsplit(coord, split=" ") %>% unlist()
art_long <- NULL
art_lat <- NULL
for(i in 1:(length(values)/2)){
art_long <- c(art_long,values[i*2-1])
art_lat <- c(art_lat, values[i*2])
}
art_long <- art_long %>% as.numeric()
art_lat <- art_lat %>% as.numeric()
art$longitude <- art_long
art$latitude <- art_lat
#basemap %>% addMarkers(lng = art$longitude, lat = art$latitude,clusterOptions = markerClusterOptions() , popup = pops, icon=hospitalIcon)
pops_art <- paste0("<center><strong style='color:blue'>",art$NAME,"</strong>","<br/>",paste(art$ADDRESS1, art$ADDRESS2), "</center>")
head(pops_art)
paste(art$ADDRESS1, art$ADDRESS2)
library(leaflet)
library(dplyr)
library(geojsonio)
library(htmltools)
nycounties <- geojson_read("../data/nyczip.geojson", what = "sp")
hospital <- read.csv("../data/hospital.csv", header=TRUE, stringsAsFactors = FALSE)
hospital$Longitude <- hospital$Longitude*(-1) # correct the longitugde
art <- read.csv("../data/art_gallery_data.csv", header=TRUE, stringsAsFactors = FALSE)
basemap <- leaflet(nycounties) %>% addPolygons( color = "#BFA",weight = 1, smoothFactor = 0.5, opacity = 1.0, fillOpacity = 0.5, highlightOptions = highlightOptions(color = "red", weight = 2, bringToFront = TRUE)) %>% addTiles()
hospitalIcon <- makeIcon(
iconUrl = "../fig/Hospital.png",
iconWidth = 30, iconHeight = 30,
iconAnchorX = 0, iconAnchorY = 0)
pops_hospital <- paste0("<center><strong style='color:blue'>",hospital$Facility.Name,"</strong>","<br/>",hospital$Phone, "<br/>", hospital$address, "</center>")
basemap %>% addMarkers(lng = hospital$Longitude, lat = hospital$Latitude, clusterOptions = markerClusterOptions() , popup = pops_hospital, icon=hospitalIcon)
coord <- sapply(art$the_geom, function(x) {
substr(x, 8, nchar(x)-1)
}) %>% as.character()
values <- strsplit(coord, split=" ") %>% unlist()
art_long <- NULL
art_lat <- NULL
for(i in 1:(length(values)/2)){
art_long <- c(art_long,values[i*2-1])
art_lat <- c(art_lat, values[i*2])
}
art_long <- art_long %>% as.numeric()
art_lat <- art_lat %>% as.numeric()
art$longitude <- art_long
art$latitude <- art_lat
pops_art <- paste0("<center><strong style='color:blue'>",art$NAME,"</strong>","<br/>",paste(art$ADDRESS1, art$ADDRESS2), "</center>")
basemap %>% addMarkers(lng = art$longitude, lat = art$latitude,clusterOptions = markerClusterOptions() , popup = pops_art, icon=hospitalIcon)
basemap %>% addMarkers(lng = art$longitude, lat = art$latitude,clusterOptions = markerClusterOptions() , popup = pops_art, icon=hospitalIcon)
View(art)
?makeIcon
galleryIcon <- makeIcon(
iconUrl = "../fig/Gallery.png",
iconWidth = 30, iconHeight = 30,
iconAnchorX = 0, iconAnchorY = 0
)
basemap %>% addMarkers(lng = art$longitude, lat = art$latitude,clusterOptions = markerClusterOptions() , popup = pops_art, icon=galleryIcon)
basemap %>% addMarkers(lng = hospital$Longitude, lat = hospital$Latitude, clusterOptions = markerClusterOptions() , popup = pops_hospital, icon=hospitalIcon)  %>% addMarkers(lng = art$longitude, lat = art$latitude,clusterOptions = markerClusterOptions() , popup = pops_art, icon=galleryIcon)
View(hospital)
theatre <- read.csv("../data/theatre_data.csv", header=TRUE, stringsAsFactors = FALSE)
View(theatre)
coord <- sapply(theatre$the_geom, function(x) {
substr(x, 8, nchar(x)-1)
}) %>% as.character()
values <- strsplit(coord, split=" ") %>% unlist()
theatre_long <- NULL
theatre_lat <- NULL
for(i in 1:(length(values)/2)){
theatre_long <- c(theatre_long,values[i*2-1])
theatre_lat <- c(theatre_lat, values[i*2])
}
theatre_long <- theatre_long %>% as.numeric()
theatre_lat <- theatre_lat %>% as.numeric()
theatre$longitude <- theatre_long
theatre$latitude <- theatre_lat
View(theatre)
pops_theatre <- paste0("<center><strong style='color:blue'>",theatre$NAME,"</strong>","<br/>",paste(theatre$ADDRESS1, theatre$ADDRESS2), "</center>")
basemap %>% addMarkers(lng = theatre$longitude, lat = theatre$latitude,clusterOptions = markerClusterOptions() , popup = pops_theatre, icon=theatreIcon)
pops_art <- paste0("<center><strong style='color:blue'>",art$NAME,"</strong>","<br/>",paste(art$ADDRESS1, art$ADDRESS2), "</center>")
basemap %>% addMarkers(lng = art$longitude, lat = art$latitude,clusterOptions = markerClusterOptions() , popup = pops_art, icon=galleryIcon)
basemap %>% addMarkers(lng = theatre$longitude, lat = theatre$latitude,clusterOptions = markerClusterOptions() , popup = pops_theatre, icon=theatreIcon)
theatreIcon <- makeIcon(
iconUrl = "../fig/Theatre.png",
iconWidth = 30, iconHeight = 30,
iconAnchorX = 0, iconAnchorY = 0)
basemap %>% addMarkers(lng = theatre$longitude, lat = theatre$latitude,clusterOptions = markerClusterOptions() , popup = pops_theatre, icon=theatreIcon)
subway <- read.csv("../data/subwaystation.csv", header=TRUE, stringsAsFactors = FALSE)
View(subway)
pops_subway <- paste0("<center><strong style='color:blue'>",subway$NAME,"</strong>","<br/>",subway$LINE, "</center>")
basemap %>% addMarkers(lng = subway$Long, lat = theatre$Lat,clusterOptions = markerClusterOptions(), popup = pops_subway, icon=subwayIcon)
subwayIcon <- makeIcon(
iconUrl = "../fig/Subway.png",
iconWidth = 30, iconHeight = 30,
iconAnchorX = 0, iconAnchorY = 0)
basemap %>% addMarkers(lng = subway$Long, lat = theatre$Lat,clusterOptions = markerClusterOptions(), popup = pops_subway, icon=subwayIcon)
basemap %>% addMarkers(lng = subway$Long, lat = subway$Lat,clusterOptions = markerClusterOptions(), popup = pops_subway, icon=subwayIcon)
IconMaker <- function(address){
icon <- makeIcon(
iconUrl = address,
iconWidth = 30, iconHeight = 30,
iconAnchorX = 0, iconAnchorY = 0)
}
hospitalIcon <- IconMaker("../fig/Hospital.png")
basemap %>% addMarkers(lng = hospital$Longitude, lat = hospital$Latitude, clusterOptions = markerClusterOptions() , popup = pops_hospital, icon=hospitalIcon)
crimeIcon <- IconMaker("../fig/Crime.png")
crimeIcon
crime <- read.csv("../data/final_crime.csv", header=TRUE, stringsAsFactors = FALSE)
View(crime)
pops_crime <- paste0("<center><strong style='color:blue'>",crime$LAW_CAT_CD,"</strong>","<br/>",crime$BORO_NM, "</center>")
basemap %>% addMarkers(lng = crime$Longitude, lat = crime$Latitude,clusterOptions = markerClusterOptions(), popup = pops_crime, icon=crimeIcon)
crime <- read.csv("../data/final_crime.csv", header=TRUE, stringsAsFactors = FALSE)
crime <- crime %>% na.omit()
basemap %>% addMarkers(lng = crime$Longitude, lat = crime$Latitude,clusterOptions = markerClusterOptions(), popup = pops_crime, icon=crimeIcon)
sales <- read.csv("../data/final_sale_data.csv", header=TRUE, stringsAsFactors = FALSE)
View(sales)
basemap %>% addPolygons(color = "#444444", weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 1.0, label = ~ paste(NTAName,school, sep =" & "))
basemap %>% addPolygons(color = "#444444", weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 1.0)
basemap %>% addPolygons(color = "#444444", weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5)
basemap %>% addPolygons(color = "#444444", weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.0)
basemap
length(unique(sales$RegionName))
View(nycounties@data)
rental <- read.csv("../data/final_rental_data.csv", header=TRUE, stringsAsFactors = FALSE)
View(rental)
length(unique(rental$RegionName))
nycounties$postalCode
as.numeric(nycounties$postalCode)
as.character(nycounties$postalCode)
as.character(nycounties$postalCode) %>% unqiue()
library(dplyr)
as.character(nycounties$postalCode) %>% unqiue()
as.character(nycounties$postalCode) %>% unique()
as.character(nycounties$postalCode) %>% unique() %>% sort()
as.character(nycounties$postalCode) %>% unique() %>% sort() %>% write.csv("~/Desktop")
as.character(nycounties$postalCode) %>% unique() %>% sort() %>% write.csv("~/Desktop/zip.csv")
sales <- read.csv("../data/final_sale_data.csv", header=TRUE, stringsAsFactors = FALSE)
sales <- read.csv("../data/final_sale.csv", header=TRUE, stringsAsFactors = FALSE)
View(sales)
length(unqiue(sales$RegionName))
length(unique(sales$RegionName))
length(unique(sales$Price_Predict))
str(nycounties@data)
nycounties$postalCode <- as.character(nycounties$postalCode)
str(sales)
library(leaflet)
library(dplyr)
library(geojsonio)
library(htmltools)
nycounties <- geojson_read("../data/nyczip.geojson", what = "sp")
hospital <- read.csv("../data/hospital.csv", header=TRUE, stringsAsFactors = FALSE)
hospital$Longitude <- hospital$Longitude*(-1) # correct the longitugde
art <- read.csv("../data/art_gallery_data.csv", header=TRUE, stringsAsFactors = FALSE)
coord <- sapply(art$the_geom, function(x) {
substr(x, 8, nchar(x)-1)
}) %>% as.character()
values <- strsplit(coord, split=" ") %>% unlist()
art_long <- NULL
art_lat <- NULL
for(i in 1:(length(values)/2)){
art_long <- c(art_long,values[i*2-1])
art_lat <- c(art_lat, values[i*2])
}
art_long <- art_long %>% as.numeric()
art_lat <- art_lat %>% as.numeric()
art$longitude <- art_long
art$latitude <- art_lat
theatre <- read.csv("../data/theatre_data.csv", header=TRUE, stringsAsFactors = FALSE)
coord <- sapply(theatre$the_geom, function(x) {
substr(x, 8, nchar(x)-1)
}) %>% as.character()
values <- strsplit(coord, split=" ") %>% unlist()
theatre_long <- NULL
theatre_lat <- NULL
for(i in 1:(length(values)/2)){
theatre_long <- c(theatre_long,values[i*2-1])
theatre_lat <- c(theatre_lat, values[i*2])
}
theatre_long <- theatre_long %>% as.numeric()
theatre_lat <- theatre_lat %>% as.numeric()
theatre$longitude <- theatre_long
theatre$latitude <- theatre_lat
subway <- read.csv("../data/subwaystation.csv", header=TRUE, stringsAsFactors = FALSE)
crime <- read.csv("../data/final_crime.csv", header=TRUE, stringsAsFactors = FALSE)
crime <- crime %>% na.omit()
sales <- read.csv("../data/final_sale.csv", header=TRUE, stringsAsFactors = FALSE)
rental <- read.csv("../data/final_rental.csv", header=TRUE, stringsAsFactors = FALSE)
basemap <- leaflet(nycounties) %>% addPolygons( color = "#BFA",weight = 1, smoothFactor = 0.5, opacity = 1.0, fillOpacity = 0.5, highlightOptions = highlightOptions(color = "red", weight = 2, bringToFront = TRUE)) %>% addTiles()
IconMaker <- function(address){
icon <- makeIcon(
iconUrl = address,
iconWidth = 30, iconHeight = 30,
iconAnchorX = 0, iconAnchorY = 0)
}
hospitalIcon <- IconMaker("../fig/Hospital.png")
galleryIcon <- IconMaker("../fig/Gallery.png")
theatreIcon <- IconMaker("../fig/Theatre.png")
subwayIcon <- IconMaker("../fig/Subway.png")
crimeIcon <- IconMaker("../fig/Crime.png")
pops_hospital <- paste0("<center><strong style='color:blue'>",hospital$Facility.Name,"</strong>","<br/>",hospital$Phone, "<br/>", hospital$address, "</center>")
basemap %>% addMarkers(lng = hospital$Longitude, lat = hospital$Latitude, clusterOptions = markerClusterOptions() , popup = pops_hospital, icon=hospitalIcon)
pops_art <- paste0("<center><strong style='color:blue'>",art$NAME,"</strong>","<br/>",paste(art$ADDRESS1, art$ADDRESS2), "</center>")
basemap %>% addMarkers(lng = art$longitude, lat = art$latitude,clusterOptions = markerClusterOptions() , popup = pops_art, icon=galleryIcon)
pops_theatre <- paste0("<center><strong style='color:blue'>",theatre$NAME,"</strong>","<br/>",paste(theatre$ADDRESS1, theatre$ADDRESS2), "</center>")
basemap %>% addMarkers(lng = theatre$longitude, lat = theatre$latitude,clusterOptions = markerClusterOptions() , popup = pops_theatre, icon=theatreIcon)
pops_subway <- paste0("<center><strong style='color:blue'>",subway$NAME,"</strong>","<br/>",subway$LINE, "</center>")
basemap %>% addMarkers(lng = subway$Long, lat = subway$Lat,clusterOptions = markerClusterOptions(), popup = pops_subway, icon=subwayIcon)
pops_crime <- paste0("<center><strong style='color:blue'>",crime$LAW_CAT_CD,"</strong>","<br/>",crime$BORO_NM, "</center>")
basemap %>% addMarkers(lng = crime$Longitude, lat = crime$Latitude,clusterOptions = markerClusterOptions(), popup = pops_crime, icon=crimeIcon)
nycounties$postalCode <- as.character(nycounties$postalCode)
sales$RegionName <- as.character(sales$RegionName)
basemap %>% addPolygons(color = "#444444", weight = 1, smoothFactor = 0.5, opacity = 1.0, fillOpacity = 0.0)
basemap %>% addMarkers(lng = hospital$Longitude, lat = hospital$Latitude, clusterOptions = markerClusterOptions() , popup = pops_hospital, icon=hospitalIcon)  %>% addMarkers(lng = art$longitude, lat = art$latitude,clusterOptions = markerClusterOptions() , popup = pops_art, icon=galleryIcon)
print(R.Version())
View(nycounties@data)
str(sales)
merge(nycounties@data, sales, by.x="postalCode", by.y="RegionName")
tablle<-merge(nycounties@data, sales, by.x="postalCode", by.y="RegionName")
table<-merge(nycounties@data, sales, by.x="postalCode", by.y="RegionName")
View(table)
head(nycounties@polygons,1)
install.packages(c("DBI", "ISLR", "MASS", "Matrix", "PKI", "RSQLite", "TTR", "boot", "broom", "cluster", "colorspace", "crayon", "curl", "devtools", "evaluate", "forcats", "foreign", "formatR", "ggrepel", "ggsci", "git2r", "haven", "hms", "htmlwidgets", "httpuv", "httr", "jsonlite", "knitr", "lattice", "lme4", "markdown", "memoise", "mgcv", "modelr", "mvtnorm", "nlme", "nycflights13", "openssl", "psych", "purrr", "quantmod", "readr", "readxl", "rmarkdown", "rpart", "rsconnect", "rstudioapi", "selectr", "shiny", "shinydashboard", "sourcetools", "stringi", "stringr", "tidyr", "tidytext", "tidyverse", "tseries", "withr", "xml2", "xts", "zoo"))
install.packages(c("DBI", "ISLR", "MASS", "Matrix", "PKI", "RSQLite", "TTR", "boot", "broom", "cluster", "colorspace", "crayon", "curl", "devtools", "evaluate", "forcats", "foreign", "formatR", "ggrepel", "ggsci", "git2r", "haven", "hms", "htmlwidgets", "httpuv", "httr", "jsonlite", "knitr", "lattice", "lme4", "markdown", "memoise", "mgcv", "modelr", "mvtnorm", "nlme", "nycflights13", "openssl", "psych", "purrr", "quantmod", "readr", "readxl", "rmarkdown", "rpart", "rsconnect", "rstudioapi", "selectr", "shiny", "shinydashboard", "sourcetools", "stringi", "stringr", "tidyr", "tidytext", "tidyverse", "tseries", "withr", "xml2", "xts", "zoo"))
install.packages(c("DBI", "ISLR", "MASS", "Matrix", "PKI", "RSQLite", "TTR", "boot", "broom", "cluster", "colorspace", "crayon", "curl", "devtools", "evaluate", "forcats", "foreign", "formatR", "ggrepel", "ggsci", "git2r", "haven", "hms", "htmlwidgets", "httpuv", "httr", "jsonlite", "knitr", "lattice", "lme4", "markdown", "memoise", "mgcv", "modelr", "mvtnorm", "nlme", "nycflights13", "openssl", "psych", "purrr", "quantmod", "readr", "readxl", "rmarkdown", "rpart", "rsconnect", "rstudioapi", "selectr", "shiny", "shinydashboard", "sourcetools", "stringi", "stringr", "tidyr", "tidytext", "tidyverse", "tseries", "withr", "xml2", "xts", "zoo"))
system('defaults write org.R-project.R force.LANG en_US.UTF-8')
dat <- nycounties@data
View(sales)
salesPrice <- NULL
for(i in 1:nrow(dat)){
zip <- dat$postalCode[i]
salesPrice <- c(salesPrice, sales$Price_Predict[sales$RegionName == zip])
}
salesPrice
view(rental)
View(rental)
1230/5
View(rental)
arrange(rental, Bedroom)
library(dplyr)
library(leaflet)
library(dplyr)
library(geojsonio)
library(geojsonio)
library(htmltools)
arrange(rental, Bedroom)
filter(rental, Bedroom == 1)
bed1 <- filter(rental, Bedroom == 1)
write.csv(bed1, "~/Desktop/rental_bed1.csv")
for(i in 1:5){
bed <- filter(rental, Bedroom == i)
write.csv(bed, paste("~/Desktop/ADS/Fall2017-project2-fall2017-project2-grp1/data/rental_bed", i,".csv", sep = ""))
}
str(nycounties@data)
s<-read.csv("../data/rental_bed1.csv", header=TRUE, stringsAsFactors = FALSE)
s<-read.csv("../data/rental_bed1.csv", header=TRUE, stringsAsFactors = FALSE)
str(s)
dat <- nycounties@data
for (i in 1:5){
s<-read.csv(paste("../data/rental_bed",i,".csv"), header=TRUE, stringsAsFactors = FALSE)
s$RegionName <- as.character(s$RegionName)
rentalPrice <- NULL
for(i in 1:nrow(dat)){
zip <- dat$postalCode[i]
rentalPrice <- c(rentalPrice, s$Price_Predict[s$RegionName == zip])
}
l[[i]] <- rentalPrice
}
for (i in 1:5){
s<-read.csv(paste("../data/rental_bed",i,".csv", sep=""), header=TRUE, stringsAsFactors = FALSE)
s$RegionName <- as.character(s$RegionName)
rentalPrice <- NULL
for(i in 1:nrow(dat)){
zip <- dat$postalCode[i]
rentalPrice <- c(rentalPrice, s$Price_Predict[s$RegionName == zip])
}
l[[i]] <- rentalPrice
}
?list
l<-list()
l
l <- list()
for (i in 1:5){
s<-read.csv(paste("../data/rental_bed",i,".csv", sep=""), header=TRUE, stringsAsFactors = FALSE)
s$RegionName <- as.character(s$RegionName)
rentalPrice <- NULL
for(i in 1:nrow(dat)){
zip <- dat$postalCode[i]
rentalPrice <- c(rentalPrice, s$Price_Predict[s$RegionName == zip])
}
l[[i]] <- rentalPrice
}
l[[1]]
l
l <- list()
for (i in 1:5){
s<-read.csv(paste("../data/rental_bed",i,".csv", sep=""), header=TRUE, stringsAsFactors = FALSE)
s$RegionName <- as.character(s$RegionName)
rentalPrice <- NULL
for(j in 1:nrow(dat)){
zip <- dat$postalCode[j]
rentalPrice <- c(rentalPrice, s$Price_Predict[s$RegionName == zip])
}
l[[i]] <- rentalPrice
}
list[[1]]
l[[1]]
View(nycounties@data)
list[[5]]
l[[5]]
nycounties$(paste("bed", "1", sep="")) <- rep(1,262)
nycounties@data$rental_Bed1 <- l[[1]]
l[[1]]
nrow(dat)
s<-read.csv(paste("../data/rental_bed",1,".csv", sep=""), header=TRUE, stringsAsFactors = FALSE)
s<-read.csv(paste("../data/rental_bed",1,".csv", sep=""), header=TRUE, stringsAsFactors = FALSE)
s$RegionName <- as.character(s$RegionName)
rentalPrice <- NULL
for(j in 1:nrow(dat)){
zip <- dat$postalCode[j]
rentalPrice <- c(rentalPrice, s$Price_Predict[s$RegionName == zip])
}
s<-read.csv(paste("../data/rental_bed",1,".csv", sep=""), header=TRUE, stringsAsFactors = FALSE
)
s$Price_Predict[rep(FALSE,262)]
rep(FALSE,262)
for(j in 1:nrow(dat)){
zip <- dat$postalCode[j]
#rentalPrice <- c(rentalPrice, s$Price_Predict[s$RegionName == zip])
if(sum(s$RegionName == zip) ==0){
print(zip)
}
}
sales <- read.csv("../data/final_sale.csv", header=TRUE, stringsAsFactors = FALSE)
nycounties$postalCode <- as.character(nycounties$postalCode)
sales$RegionName <- as.character(sales$RegionName)
dat <- nycounties@data
salesPrice <- NULL
for(i in 1:nrow(dat)){
zip <- dat$postalCode[i]
salesPrice <- c(salesPrice, sales$Price_Predict[sales$RegionName == zip])
}
nycounties@data$sales <- salesPrice
salesPrice
salesPrice
len(salesPrice)
length(salesPrice)
basemap <- leaflet(nycounties) %>% addPolygons( color = "#BFA",weight = 1, smoothFactor = 0.5, opacity = 1.0, fillOpacity = 0.5, highlightOptions = highlightOptions(color = "red", weight = 2, bringToFront = TRUE)) %>% addTiles()
basemap
basemap <- leaflet(nycounties) %>% addPolygons( color = "#BFA",weight = 1, smoothFactor = 0.5, opacity = 1.0, fillOpacity = 0.5, highlightOptions = highlightOptions(color = "red", weight = 2, bringToFront = TRUE), labels=~postalCode) %>% addTiles()
basemap <- leaflet(nycounties) %>% addPolygons( color = "#BFA",weight = 1, smoothFactor = 0.5, opacity = 1.0, fillOpacity = 0.5, highlightOptions = highlightOptions(color = "red", weight = 2, bringToFront = TRUE), label =~postalCode) %>% addTiles()
basemap
library(rgdal)
states <- readOGR("~/Desktop/mygeodata/shp/nyczip.shp",
layer = "nyczip", GDAL1_integer64_policy = TRUE)
states <- readOGR("~/Desktop/mygeodata/shp/nyczip.shp",
layer = "nyczip", GDAL1_integer64_policy = TRUE)
states <- readOGR("~/Desktop/mygeodata/nyczip.shp",
layer = "nyczip", GDAL1_integer64_policy = TRUE)
states <- readOGR("~/Desktop/mygeodata/nyczip.shp",
layer = "nyczip", GDAL1_integer64_policy = TRUE)
counties <- readOGR("~/Desktop/mygeodata/nyczip.shp",
layer = "nyczip", GDAL1_integer64_policy = TRUE)
library(rgdal)
counties <- readOGR("~/Desktop/mygeodata/nyczip.shp",
layer = "nyczip", GDAL1_integer64_policy = TRUE)
counties <- readOGR("~/Desktop/mygeodata/nyczip.shp",
layer = "nyczip")
counties <- readOGR("~/Desktop/mygeodata/nyczip.shp")
counties <- readOGR(dsn=".", layer="~/Desktop/mygeodata/nyczip.shp")
counties <- readOGR(dsn=".", layer="~/Desktop/mygeodata/nyczip.shp")
counties <- readOGR("~/Desktop/mygeodata/nyczip.shp")
counties <- readOGR("~/Desktop/mygeodata/nyczip.shp")
library(rgdal)
counties <- readOGR("~/Desktop/mygeodata/nyczip.shp")
R CMD INSTALL --configure-vars='INCLUDE_DIR= LIB_DIR=...'
?readOGR
counties <- readOGR(dsn="~/Desktop/mygeodata", layer = "nyczip")
counties <- readOGR(dsn="~/Desktop/mygeodata", layer = "nyczip")
counties <- readOGR(dsn="~/Desktop/mygeodata", layer = "nyczip")
counties <- readOGR(dsn="~/Desktop/mygeodata", layer = "nyczip", GDAL1_integer64_policy = TRUE)
setwd("./proj3_sample")
if(!require("EBImage")){
source("https://bioconductor.org/biocLite.R")
biocLite("EBImage")
}
if(!require("gbm")){
install.packages("gbm")
}
library("EBImage")
library("gbm")
library(gmb)
library(gbm)
?gbm
if(!require("gbm")){
install.packages("gbm")
}
library("EBImage")
library("gbm")
setwd("./ads_spr2017_proj3")
getwd
getwd()
setwd("/Users/zhaox694/Desktop/ADS/Fall2017-project3-fall2017-project3-grp5/doc")
experiment_dir <- "../data/zipcode/" # This will be modified for different data sets.
img_train_dir <- paste(experiment_dir, "train/", sep="")
img_test_dir <- paste(experiment_dir, "test/", sep="")
run.cv=TRUE # run cross-validation on the training set
K <- 5  # number of CV folds
run.feature.train=TRUE # process features for training set
run.test=TRUE # run evaluation on an independent test set
run.feature.test=TRUE # process features for test set
model_values <- seq(3, 11, 2)
model_labels = paste("GBM with depth =", model_values)
model-labels
model_labels
label_train <- read.table(paste(experiment_dir, "train_label.txt", sep=""),
header=F)
paste(experiment_dir, "train_label.txt", sep="")
source("../lib/feature.R")
help(system.time)
tm_feature_train <- NA
if(run.feature.train){
tm_feature_train <- system.time(dat_train <- feature(img_train_dir,
"train",
data_name="zip",
export=TRUE))
}
tm_feature_train
tm_feature_test <- NA
if(run.feature.test){
tm_feature_test <- system.time(dat_test <- feature(img_test_dir,
"test",
data_name="zip",
export=TRUE))
}
tm_feature_test
View(dat_train)
help("gbm-package")
source("../lib/cross_validation.R")
model_values
source("../lib/train.R")
source("../lib/test.R")
source("../lib/cross_validation.R")
if(run.cv){
err_cv <- array(dim=c(length(model_values), 2))
for(k in 1:length(model_values)){
cat("k=", k, "\n")
err_cv[k,] <- cv.function(dat_train, label_train, model_values[k], K)
}
save(err_cv, file="../output/err_cv.RData")
}
k
model_values
help(gbm.fit)
help(gbm.perf)
model_values[1]
?save
cat("sdf")
?predict
knitr::opts_chunk$set(echo = TRUE)
print(R.version)
install.packages("gbm")
install.packages("gbm")
library(gbm)
setwd("..")
getwd()
knitr::opts_chunk$set(echo = TRUE)
knitr::root.dir
knitr::opts_chunk$set(echo = TRUE)
setwd("../")
knitr::opts_knit$set(root.dir = "../")
getwd()
knitr::opts_knit$set(root.dir = "../")
getwd()
knitr::opts_knit$set(root.dir = "../")
getwd()
knitr::opts_chunk$set(echo = TRUE)
library(gbm)
getwd()
getwd()
knitr::opts_knit$set(root.dir = "../")
getwd()
setwd("../")
getwd()
setwd("../")
getwd()
setwd("../")
getwd()
getwd()
setwd("../")
getwd()
setwd("../")
getwd()
setwd("../")
setwd("../")
getwd()
knitr::opts_chunk$set(echo = TRUE)
library(gbm)
setwd("../")
set.seed(1)
run.cv=TRUE # run cross-validation on the training set
K <- 5  # number of CV folds
run.test=TRUE # run evaluation on an independent test set
model_values <- seq(3, 11, 2)
model_labels = paste("GBM with depth =", model_values)
labels <- read.csv("../data/labe_train.csv",header=TRUE)
getwd()
